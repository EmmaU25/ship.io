<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<title>ship.io</title>
	<style>
		body{
			margin: 0;
			position: relative;
			background-color: #9FC7E1;

		}
		canvas {
			margin: auto;
		}
	</style>
</head>
<body>

	<img src="/images/head.jpg">
	<script src="/socket.io/socket.io.js"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/phaser/2.4.2/phaser.min.js"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
	<script type="text/javascript">
		
		var wi = 750;
		var he = 500;
		var game = new Phaser.Game(wi, he, Phaser.Auto, '', {preload: preload, create: create, update: GameLoop});
		var world_size =  {w: 1000, h: 900};
		var others = {};
		var balls = [];
		var socket;
			
		var player = {
			sprite : null,
			speed_x : 0,
			speed_y : 0,
			speed: 1,
			friction: 0.95,
			shot: false,
			score: 0,
			update: function(){
				//Mouse Rotation
				var directionX = (game.input.mousePointer.x + game.camera.x) - this.sprite.x;
				var directionY = (game.input.mousePointer.y + game.camera.y) - this.sprite.y;
				var angle = Math.atan2(directionY, directionX) - Math.PI/2;
				var dir =  (angle - this.sprite.rotation) / (Math.PI * 2);
					
				dir -= Math.round(dir);
				dir = dir * Math.PI * 2;
				this.sprite.rotation += dir * 0.1;

				// Game Controls 
				if(game.input.keyboard.isDown(Phaser.Keyboard.Z) || game.input.keyboard.isDown(Phaser.Keyboard.UP) || game.input.keyboard.isDown(Phaser.Keyboard.SPACEBAR)){
					this.speed_x += Math.cos(this.sprite.rotation + 2) * this.speed;
					this.speed_y += Math.sin(this.sprite.rotation  + 2) * this.speed;
					socket.emit('move', {x: this.sprite.x, y: this.sprite.y, angle: this.sprite.rotation});
				}

				this.sprite.x += this.speed_x;
				this.sprite.y += this.speed_y;
				this.speed_x *= this.friction;
				this.speed_y *= this.friction;

			  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

			  if(game.input.activePointer.leftButton.isDown && !this.shot){
			  	var speed_x = Math.cos(this.sprite.rotation + Math.PI/2) * 20;
			  	var speed_y = Math.sin(this.sprite.rotation + Math.PI/2) * 20;
			  	/*var ball = {};
			  	ball.speed_x = speed_x;
			  	ball.speed_y =  speed_y;
			  	ball.sprite  = game.add.sprite(this.sprite.x + ball.speed_x, this.sprite.y + ball.speed_y, 'ball');
			  	balls.push(ball);*/
			  	socket.emit('shoot', {x: this.sprite.x, y: this.sprite.y , angle: this.sprite.rotation, speed_x: speed_x, speed_y: speed_y});
			  	this.shot = true;
			  	
			  }

			  if(!game.input.activePointer.leftButton.isDown){
			  	this.shot = false;
			  }

			  if(this.sprite.alpha < 1){
			  	this.sprite.alpha += (1 - this.sprite.alpha) * 0.16;
			  }else {
			  	this.sprite.alpha = 1;
			  }

			  
			}
		}


		function preload(){
			game.load.crossOrigin = "Anonymous";
			game.stage.backgroundColor = "#3399DA";
			game.load.image('ship', 'https://cdn.glitch.com/d371c629-b475-4d7b-88bc-b2558ae406a4%2Fship2_2.png');
			game.load.image('ball', 'https://cdn.glitch.com/d371c629-b475-4d7b-88bc-b2558ae406a4%2Fcannon_ball.png');
		}


		function createShip(x,y,angle){
			var s = game.add.sprite(x,y,'ship');
			s.rotation = angle;
			s.anchor.setTo(0.5,0.5);
			return s;
		}


		function create () {
			/* body... */
			socket = io.connect('http://localhost:3000')
			player.sprite = game.add.sprite(Math.random() * world_size.w/2 + world_size.w/2, Math.random() * world_size.h/2 + world_size.h/2, 'ship');
			player.sprite.anchor.setTo(0.5,0,5);
			//Dire au serveur qu'un nouveu utilisateur est arrivÃ©
			socket.emit('new-player', {x:player.sprite.x, y: player.sprite.y,angle:player.sprite.rotation,score:player.score});

			//Creer un nouveau jouer
			/*socket.on('create-new-player', function(res){
				createShip(res.x,res.y,res.angle)
			})*/

			socket.on('update-player', function(data){
				var found = {};
				for(var i in data){
					if(others[i] == undefined && i != socket.id){
						var d = data[i];
						others[i] = createShip(d.x,d.y,d.angle,d.score);
					}
					found[i] = true;

					if(i != socket.id){
						others[i].x = data[i].x;
						others[i].y = data[i].y;
						others[i].rotation = data[i].angle;
					}
				}

				for(var y in others){
					if(!found[y]){
						others[i].destroy();
						delete others[i];
					}
				}
			})

			socket.on('balls-update', function(data){
				for (var i = 0; i < data.length; i++) {
					if(balls[i] == undefined){
						balls[i] = game.add.sprite(data[i].x, data[i].y,'ball');
					}else{
						balls[i].x = data[i].x;
						balls[i].y = data[i].y; 					
					}
				}

				for (var i = data.length ; i < balls.length; i++) {
					balls[i].destroy();
					balls.splice(i,1);
					i--;
				}
			})

			socket.on('hit', function(id){
				if(id == socket.id){
					player.sprite.alpha = 0;
					player.score --;
				}else {
					others[id].alpha = 0;
					others[id].score --;
				}
			})

			game.world.setBounds(0,0,world_size.w, world_size.h);
			game.camera.x = player.sprite.x - wi/2;
			game.camera.y = player.sprite.y - he/2;	
		}

		function GameLoop(){
			player.update();

			//Gammer camera
			var camera_x = player.sprite.x - wi/2;
			var camera_y = player.sprite.y - he/2;
			game.camera.x +=(camera_x - game.camera.x) * 0.08;
			game.camera.y +=(camera_y - game.camera.y) * 0.08;
			
			for(var id  in others){
				if (others[id].alpha < 1) {
					others[id].alpha += (1 - others[id].alpha) * 0.16; 
				}else {
					others[id].alpha = 1;
				}
			}

			//Partie collision
			/*for(var l in others){
				game.physics.arcade.collide(others[socket.id], others[l]);
			}*/
			/*for (var i = 0; i < balls.length; i++) {
				var bull = balls[i];
				bull.sprite.x += bull.speed_x;
				bull.sprite.y += bull.speed_y;

				if(bull.sprite.x < -10 || bull.sprite.x > world_size.w || bull.sprite.y < -10 || bull.sprite.y > world_size.h){
					bull.sprite.destroy();
					balls.splice(i,1);
					i--;
				}		
			}*/
 		}

	</script>
</body>
</html>