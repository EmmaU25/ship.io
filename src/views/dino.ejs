<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<title>ship.io</title>
	<style>
		body{
			margin: 7;
			position: relative;
			background-color: #9FC7E1;
		}
		canvas {
			margin: auto;
		}
		.chat
		{
		    list-style: none;
		    margin: 0;
		    padding: 0;
		    overflow-x: hidden;
			overflow-y: auto;
		}
		
		.panel-body{
			height: 500px;
			width: 270px;
			overflow-x: hidden;
			overflow-y: auto;
		}
		
		#bar-chat{
			position: absolute;
		}

		.img-circle{
			width: 20px;
			height: 20px;
		}
		.chat li
		{
		    margin-bottom: 10px;
		    padding-bottom: 5px;
		    border-bottom: 1px dotted #B3A9A9;

		}

		.chat li.left .chat-body
		{
		    margin-left: 60px;
		}
		
		.chat li.right .chat-body
		{
		    margin-right: 60px;
		}


		.chat li .chat-body p
		{
		    margin: 0;
		    color: #777777;
		}	



		::-webkit-scrollbar-track
		{
		    -webkit-box-shadow: inset 0 0 6px rgba(0,0,0,0.3);
		    background-color: #F5F5F5;
		}

		::-webkit-scrollbar
		{
		    width: 12px;
		    background-color: #F5F5F5;
		}

		::-webkit-scrollbar-thumb
		{
		    -webkit-box-shadow: inset 0 0 6px rgba(0,0,0,.3);
		    background-color: #555;
		}
		
		.rigth {
			border: 1px solid black;
		    margin-left: 0;
		    float: right;
		    margin-top: 0px;
		   
		}
		
		.score{
			float: right;
			width: 250px;
		   height: 100px;
		   overflow-x: hidden;
		   overflow-y: auto;
		}
		.cont{
		   width: 250px;
		   height: 100px;
		   overflow-x: hidden;
		   overflow-y: auto;
		}

	</style>
	<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
</head>
<body>

<div class="jumbotron">
  <div class="container">
    <h1>Hello, <a href="#" class="navbar-link"><%= user %></a> !</h1>
  <p>Amusez bien la bataille navale</p>
  </div>
</div>

<div class="container-fluid">
	<div class="row" >
		<div class="col-md-4">
			    <div class="row">
			        <div class="col-md-8" id="bar-chat">
			            <div class="panel panel-primary">
			                <div class="panel-heading">
			                    <span class="glyphicon glyphicon-comment"></span> Chat
			                </div>
			                <div class="panel-body">
			                    <ul class="chat" id="chat">
			                    
			                    </ul>
			                </div>
			                <div class="panel-footer">
		                		<div class="input-group">
		                        <input id="btn-input" type="text" class="form-control input-sm" placeholder="Ecrivez votre message..." />
		                        <span class="input-group-btn">
		                            <button class="btn btn-warning btn-sm" id="btn-chat" onclick="sendMessage()">
		                                Send</button>
		                        </span>
		                    	</div>
			                </div>
		            </div>
		        </div>
		    </div>
		</div>

	<div class="rigth">
		<div class="cont">
			<ul id="status">
				
			</ul>
		</div>	
			
		<div class="score">
			<ul id="scor">
				
			</ul>
		</div>	
	</div>
	</div>
</div>





	<script src="/socket.io/socket.io.js"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/phaser/2.4.2/phaser.min.js"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js"></script>
	<script type="text/javascript">

		var wi = 750;
		var he = 500;
		var game = new Phaser.Game(wi, he, Phaser.Auto, '', {preload: preload, create: create, update: GameLoop});
		var world_size =  {w: 1000, h: 900};
		var others = {};
		var balls = [];
		var socket;
			
		var player = {
			sprite : null,
			speed_x : 0,
			speed_y : 0,
			speed: 1,
			friction: 0.95,
			shot: false,
			score: 0,
			ship:"",
			update: function(){
				//Mouse Rotation
				var directionX = (game.input.mousePointer.x + game.camera.x) - this.sprite.x;
				var directionY = (game.input.mousePointer.y + game.camera.y) - this.sprite.y;
				var angle = Math.atan2(directionY, directionX) - Math.PI/2;
				var dir =  (angle - this.sprite.rotation) / (Math.PI * 2);
					
				dir -= Math.round(dir);
				dir = dir * Math.PI * 2;
				this.sprite.rotation += dir * 0.1;

				// Game Controls 
				if(game.input.keyboard.isDown(Phaser.Keyboard.Z) || game.input.keyboard.isDown(Phaser.Keyboard.UP) || game.input.keyboard.isDown(Phaser.Keyboard.SPACEBAR)){
					this.speed_x += Math.cos(this.sprite.rotation + 2) * this.speed;
					this.speed_y += Math.sin(this.sprite.rotation  + 2) * this.speed;
					
				}

				this.sprite.x += this.speed_x;
				this.sprite.y += this.speed_y;

				this.speed_x *= this.friction;
				this.speed_y *= this.friction;

			  ////////////////////// Control de la souris///////////////////////////////////////////////////////////////////////

			  if(game.input.activePointer.leftButton.isDown && !this.shot){
			  	var speed_x = Math.cos(this.sprite.rotation + Math.PI/2) * 20;
			  	var speed_y = Math.sin(this.sprite.rotation + Math.PI/2) * 20;
			  	socket.emit('shoot', {x: this.sprite.x, y: this.sprite.y , angle: this.sprite.rotation, speed_x: speed_x, speed_y: speed_y});
			  	this.shot = true;
			  	
			  }

			  /////////////////////////////////Clic shoot ////////////////////////////////////////////////////////////////////
			  if(!game.input.activePointer.leftButton.isDown){
			  	this.shot = false;
			  }

			  if(this.sprite.alpha < 1){
			  	this.sprite.alpha += (1 - this.sprite.alpha) * 0.16;
			  }else {
			  	this.sprite.alpha = 1;
			  }
			  
			  socket.emit('move', {x: this.sprite.x, y: this.sprite.y, angle: this.sprite.rotation});
			}
		}

		///////chargement des images/////////////////////////////////////////////////////////////////////////
		function preload(){
			game.load.crossOrigin = "Anonymous";
			game.stage.backgroundColor = "#3399DA";
			game.load.image('ship1', 'https://cdn.glitch.com/d371c629-b475-4d7b-88bc-b2558ae406a4%2Fship2_2.png');
			game.load.image('ship2', 'https://cdn.glitch.com/d371c629-b475-4d7b-88bc-b2558ae406a4%2Fship3_3.png');
			game.load.image('ship3', 'https://cdn.glitch.com/d371c629-b475-4d7b-88bc-b2558ae406a4%2Fship4_3.png');
			game.load.image('ship4', 'https://cdn.glitch.com/d371c629-b475-4d7b-88bc-b2558ae406a4%2Fship5_1.png');
			game.load.image('ship5', 'https://cdn.glitch.com/d371c629-b475-4d7b-88bc-b2558ae406a4%2Fship6_1.png');
			game.load.image('ball', 'https://cdn.glitch.com/d371c629-b475-4d7b-88bc-b2558ae406a4%2Fcannon_ball.png');
		}

		function createShip(x,y,angle,ship){
			var s = game.add.sprite(x,y,ship);
			s.rotation = angle;
			s.anchor.setTo(0.5,0.5);
			return s;
		}

	 	function collisionHandler (others){
			for(id in others){
				others[id].play('flash');
			}
 		}

		function create () {
			socket = io.connect('http://localhost:3000')
			var num = Math.floor(Math.random() * 5) + 1;
			player.ship = "ship"+num;
			player.sprite = game.add.sprite(Math.random() * world_size.w/2 + world_size.w/2, Math.random() * world_size.h/2 + world_size.h/2, player.ship);
			player.sprite.anchor.setTo(0.5,0,5);

			//Dire au serveur qu'un nouveu utilisateur est arrivÃ©
			socket.emit('new-player', {x:player.sprite.x, y: player.sprite.y,angle:player.sprite.rotation,score:player.score,ship:player.ship});

			//Creer un nouveau jouer
			socket.on('update-player', function(data){
				var found = {};
				for(var i in data){
					if(others[i] == undefined && i != socket.id){
						var d = data[i];
						others[i] = createShip(d.x,d.y,d.angle,d.ship,d.score);
					}
					found[i] = true;

					if(i != socket.id){
						others[i].x = data[i].x;
						others[i].y = data[i].y;
						others[i].rotation = data[i].angle;
						others[i].ship = data[i].ship;
					}
				}

				for(var y in others){
					if(!found[y]){
						others[y].destroy();
						delete others[y];
					}
				}
			})


			socket.on('scor',function(d){
				for(var i in d){
					$('#scor').append("<li>"+d[i].username+' : '+d[i].score+"Points</li>");
				}
			});

			socket.on('balls-update', function(data){
				for (var i = 0; i < data.length; i++) {
					if(balls[i] == undefined){
						balls[i] = game.add.sprite(data[i].x, data[i].y,'ball');
					}else{
						balls[i].x = data[i].x;
						balls[i].y = data[i].y; 					
					}
				}

				//////Action de deconexion d'un user
				for (var i = data.length ; i < balls.length; i++) {
					balls[i].destroy();
					balls.splice(i,1);
					i--;
				}
			})

			socket.on('msg',function(m){
				$('#status').append(m);
			})


			socket.on('message',function(mesage){
				$('#chat').append(mesage);
			})

			socket.on('hit', function(id){
				if(id == socket.id){
					player.sprite.alpha = 0;
				}else {
					socket.emit("touch", {shoot: socket.id, fired: id});
					others[id].alpha = 0;	
				}
			})

			game.world.setBounds(0,0,world_size.w, world_size.h);
			game.camera.x = player.sprite.x - wi/2;
			game.camera.y = player.sprite.y - he/2;
			game.physics.startSystem(Phaser.Physics.ARCADE);
			game.physics.enable(others, Phaser.Physics.ARCADE);

		}

		function GameLoop(){
			player.update();
			//Gammer camera
			var camera_x = player.sprite.x - wi/2;
			var camera_y = player.sprite.y - he/2;
			game.camera.x +=(camera_x - game.camera.x) * 0.08;
			game.camera.y +=(camera_y - game.camera.y) * 0.08;
			game.physics.arcade.collide(others,collisionHandler,null,this);

			for(var id  in others){
				if (others[id].alpha < 1) {
					others[id].alpha += (1 - others[id].alpha) * 0.16; 
				}else {
					others[id].alpha = 1;
				}
			}
 		}

 		function sendMessage(){
 				socket.emit('message', document.getElementById('btn-input').value);
 				document.getElementById('btn-input').value = " ";	
 		}

	</script>
</body>
</html>